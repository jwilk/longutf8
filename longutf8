#!/usr/bin/env python3

# Copyright © 2014-2021 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

'''
generator of overlong UTF-8 sequences
'''

import argparse
import sys

0_0  # Python >= 3.6 is required

def error(msg):
    prog = argparse.ArgumentParser().prog
    print(f'{prog}: error:', msg, file=sys.stderr)
    sys.exit(1)

def main():
    doc = __doc__
    if doc is not None:
        doc = doc.strip()
    ap = argparse.ArgumentParser(description=doc)
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'
    group = ap.add_mutually_exclusive_group()
    for n in range(2, 7):
        template = (
            '1' * n + '0' + 'x' * (7 - n) +
            (' 10' + (6 * 'x')) * (n - 1)
        )
        group.add_argument(
            f'-{n}',
            dest='n', action='store_const', const=n,
            help=f'produce {n}-byte sequences ({template})',
        )
    ap.add_argument('text', metavar='TEXT', nargs='+')
    options = ap.parse_args()
    stdout = sys.stdout.buffer
    for s in options.text:
        for c in s:
            n = options.n
            if n is None:
                n = len(c.encode('UTF-8')) + 1
                assert n <= 6
            c = ord(c)
            limit = 1 << (1 + 5 * n)
            if c >= limit:
                error(f'{n}-byte sequences can only encode characters smaller than U+{limit:04X}')
            b = [None] * n
            for j in range(n - 1, 0, -1):
                b[j] = (1 << 7) | (c & ((1 << 6) - 1))
                c >>= 6
            b[0] = ((1 << 8) - (1 << (8 - n))) | c
            stdout.write(bytes(b))
        stdout.write(b'\n')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
